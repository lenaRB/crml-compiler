// Generated from modelica.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import modelicaListener from './modelicaListener.js';
const serializedATN = [4,1,95,1064,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,1,0,3,0,164,8,0,1,0,1,0,3,0,168,8,0,1,0,3,0,
171,8,0,1,0,3,0,174,8,0,1,0,1,0,1,0,5,0,179,8,0,10,0,12,0,182,9,0,1,0,1,
0,1,1,3,1,187,8,1,1,1,1,1,1,1,1,2,3,2,193,8,2,1,2,1,2,1,2,3,2,198,8,2,1,
2,1,2,1,2,3,2,203,8,2,1,2,1,2,1,2,1,2,3,2,209,8,2,1,2,3,2,212,8,2,1,2,1,
2,3,2,216,8,2,1,3,1,3,1,3,3,3,221,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,3,4,232,8,4,1,4,1,4,1,4,1,4,1,4,3,4,239,8,4,1,5,1,5,1,5,1,5,1,5,3,5,246,
8,5,1,5,3,5,249,8,5,1,5,1,5,1,5,3,5,254,8,5,1,5,3,5,257,8,5,1,5,3,5,260,
8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,273,8,6,10,6,12,6,276,
9,6,1,6,1,6,1,6,1,7,3,7,282,8,7,1,8,1,8,1,8,5,8,287,8,8,10,8,12,8,290,9,
8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,302,8,10,10,10,12,
10,305,9,10,1,10,1,10,3,10,309,8,10,1,10,3,10,312,8,10,1,10,3,10,315,8,10,
1,10,3,10,318,8,10,1,10,1,10,1,10,3,10,323,8,10,1,11,1,11,1,12,1,12,1,12,
3,12,330,8,12,1,12,1,12,1,12,3,12,335,8,12,1,12,1,12,1,13,1,13,1,13,5,13,
342,8,13,10,13,12,13,345,9,13,1,14,1,14,1,14,3,14,350,8,14,1,14,3,14,353,
8,14,1,14,3,14,356,8,14,1,14,3,14,359,8,14,1,14,1,14,1,14,1,14,1,14,3,14,
366,8,14,1,14,1,14,1,14,3,14,371,8,14,3,14,373,8,14,3,14,375,8,14,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,388,8,15,1,15,3,15,
391,8,15,3,15,393,8,15,1,15,1,15,1,16,1,16,1,16,5,16,400,8,16,10,16,12,16,
403,9,16,1,17,1,17,1,17,3,17,408,8,17,1,17,3,17,411,8,17,1,18,1,18,1,18,
3,18,416,8,18,1,19,1,19,1,19,3,19,421,8,19,1,19,1,19,1,20,3,20,426,8,20,
1,20,3,20,429,8,20,1,20,3,20,432,8,20,1,21,1,21,1,21,5,21,437,8,21,10,21,
12,21,440,9,21,1,22,1,22,3,22,444,8,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
3,24,453,8,24,1,24,3,24,456,8,24,1,25,1,25,1,25,3,25,461,8,25,1,25,1,25,
1,25,1,25,3,25,467,8,25,1,26,1,26,3,26,471,8,26,1,26,1,26,1,27,1,27,1,27,
5,27,478,8,27,10,27,12,27,481,9,27,1,28,1,28,3,28,485,8,28,1,29,3,29,488,
8,29,1,29,3,29,491,8,29,1,29,1,29,3,29,495,8,29,1,30,1,30,3,30,499,8,30,
1,30,1,30,1,31,1,31,3,31,505,8,31,1,31,3,31,508,8,31,1,31,1,31,1,31,3,31,
513,8,31,1,32,1,32,1,32,3,32,518,8,32,1,32,3,32,521,8,32,1,33,1,33,1,33,
1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,3,36,534,8,36,1,36,1,36,1,36,1,36,
5,36,540,8,36,10,36,12,36,543,9,36,1,37,3,37,546,8,37,1,37,1,37,1,37,1,37,
5,37,552,8,37,10,37,12,37,555,9,37,1,38,1,38,1,38,3,38,560,8,38,1,38,1,38,
1,38,1,38,3,38,566,8,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,574,8,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,589,8,39,
1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,599,8,40,10,40,12,40,602,9,
40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,610,8,40,10,40,12,40,613,9,40,5,40,
615,8,40,10,40,12,40,618,9,40,1,40,1,40,1,40,1,40,5,40,624,8,40,10,40,12,
40,627,9,40,3,40,629,8,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,5,
41,640,8,41,10,41,12,41,643,9,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,651,
8,41,10,41,12,41,654,9,41,5,41,656,8,41,10,41,12,41,659,9,41,1,41,1,41,1,
41,1,41,5,41,665,8,41,10,41,12,41,668,9,41,3,41,670,8,41,1,41,1,41,1,41,
1,42,1,42,1,42,1,42,1,42,1,42,5,42,681,8,42,10,42,12,42,684,9,42,1,42,1,
42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,695,8,43,10,43,12,43,698,9,43,
1,43,1,43,1,43,1,44,1,44,1,44,5,44,706,8,44,10,44,12,44,709,9,44,1,45,1,
45,1,45,3,45,714,8,45,1,46,1,46,1,46,1,46,1,46,1,46,5,46,722,8,46,10,46,
12,46,725,9,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,5,47,736,8,47,
10,47,12,47,739,9,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,747,8,47,10,47,12,
47,750,9,47,5,47,752,8,47,10,47,12,47,755,9,47,1,47,1,47,1,47,1,48,1,48,
1,48,1,48,1,48,1,48,5,48,766,8,48,10,48,12,48,769,9,48,1,48,1,48,1,48,1,
48,1,48,1,48,5,48,777,8,48,10,48,12,48,780,9,48,5,48,782,8,48,10,48,12,48,
785,9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,807,8,50,10,50,12,50,810,9,50,1,
50,1,50,1,50,3,50,815,8,50,1,51,1,51,1,51,1,51,1,51,3,51,822,8,51,3,51,824,
8,51,1,52,1,52,1,52,5,52,829,8,52,10,52,12,52,832,9,52,1,53,1,53,1,53,5,
53,837,8,53,10,53,12,53,840,9,53,1,54,3,54,843,8,54,1,54,1,54,1,55,1,55,
1,55,1,55,3,55,851,8,55,1,56,1,56,1,57,3,57,856,8,57,1,57,1,57,1,57,1,57,
5,57,862,8,57,10,57,12,57,865,9,57,1,58,1,58,1,59,1,59,1,59,1,59,5,59,873,
8,59,10,59,12,59,876,9,59,1,60,1,60,1,61,1,61,1,61,3,61,883,8,61,1,62,1,
62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,893,8,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,5,62,903,8,62,10,62,12,62,906,9,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,3,62,915,8,62,1,63,3,63,918,8,63,1,63,1,63,1,64,1,64,1,64,5,
64,925,8,64,10,64,12,64,928,9,64,1,65,3,65,931,8,65,1,65,1,65,3,65,935,8,
65,1,65,1,65,1,65,3,65,940,8,65,5,65,942,8,65,10,65,12,65,945,9,65,1,66,
1,66,3,66,949,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,958,8,67,1,67,
1,67,1,67,3,67,963,8,67,1,67,3,67,966,8,67,1,68,1,68,1,68,3,68,971,8,68,
1,68,3,68,974,8,68,1,69,1,69,1,69,5,69,979,8,69,10,69,12,69,982,9,69,1,69,
1,69,3,69,986,8,69,1,70,1,70,1,70,5,70,991,8,70,10,70,12,70,994,9,70,1,71,
1,71,1,71,1,71,1,72,1,72,3,72,1002,8,72,1,73,1,73,1,73,1,73,3,73,1008,8,
73,1,73,1,73,1,74,3,74,1013,8,74,1,74,1,74,3,74,1017,8,74,5,74,1019,8,74,
10,74,12,74,1022,9,74,1,75,1,75,1,75,5,75,1027,8,75,10,75,12,75,1030,9,75,
1,76,1,76,1,76,1,76,5,76,1036,8,76,10,76,12,76,1039,9,76,1,76,1,76,1,77,
1,77,3,77,1045,8,77,1,78,1,78,3,78,1049,8,78,1,79,1,79,1,79,5,79,1054,8,
79,10,79,12,79,1057,9,79,3,79,1059,8,79,1,80,1,80,1,80,1,80,0,0,81,0,2,4,
6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
140,142,144,146,148,150,152,154,156,158,160,0,9,1,0,16,17,1,0,28,29,1,0,
44,45,1,0,46,48,1,0,70,75,1,0,76,79,3,0,39,39,42,42,80,81,1,0,82,83,3,0,
16,16,26,26,52,52,1156,0,163,1,0,0,0,2,186,1,0,0,0,4,192,1,0,0,0,6,220,1,
0,0,0,8,238,1,0,0,0,10,240,1,0,0,0,12,263,1,0,0,0,14,281,1,0,0,0,16,283,
1,0,0,0,18,291,1,0,0,0,20,294,1,0,0,0,22,324,1,0,0,0,24,329,1,0,0,0,26,343,
1,0,0,0,28,374,1,0,0,0,30,376,1,0,0,0,32,396,1,0,0,0,34,404,1,0,0,0,36,412,
1,0,0,0,38,417,1,0,0,0,40,425,1,0,0,0,42,433,1,0,0,0,44,441,1,0,0,0,46,447,
1,0,0,0,48,450,1,0,0,0,50,466,1,0,0,0,52,468,1,0,0,0,54,474,1,0,0,0,56,484,
1,0,0,0,58,487,1,0,0,0,60,496,1,0,0,0,62,502,1,0,0,0,64,514,1,0,0,0,66,522,
1,0,0,0,68,526,1,0,0,0,70,529,1,0,0,0,72,533,1,0,0,0,74,545,1,0,0,0,76,565,
1,0,0,0,78,588,1,0,0,0,80,592,1,0,0,0,82,633,1,0,0,0,84,674,1,0,0,0,86,688,
1,0,0,0,88,702,1,0,0,0,90,710,1,0,0,0,92,715,1,0,0,0,94,729,1,0,0,0,96,759,
1,0,0,0,98,789,1,0,0,0,100,814,1,0,0,0,102,816,1,0,0,0,104,825,1,0,0,0,106,
833,1,0,0,0,108,842,1,0,0,0,110,846,1,0,0,0,112,852,1,0,0,0,114,855,1,0,
0,0,116,866,1,0,0,0,118,868,1,0,0,0,120,877,1,0,0,0,122,879,1,0,0,0,124,
914,1,0,0,0,126,917,1,0,0,0,128,921,1,0,0,0,130,930,1,0,0,0,132,946,1,0,
0,0,134,965,1,0,0,0,136,973,1,0,0,0,138,975,1,0,0,0,140,987,1,0,0,0,142,
995,1,0,0,0,144,1001,1,0,0,0,146,1003,1,0,0,0,148,1012,1,0,0,0,150,1023,
1,0,0,0,152,1031,1,0,0,0,154,1044,1,0,0,0,156,1046,1,0,0,0,158,1058,1,0,
0,0,160,1060,1,0,0,0,162,164,5,1,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,
170,1,0,0,0,165,167,5,2,0,0,166,168,3,128,64,0,167,166,1,0,0,0,167,168,1,
0,0,0,168,169,1,0,0,0,169,171,5,3,0,0,170,165,1,0,0,0,170,171,1,0,0,0,171,
180,1,0,0,0,172,174,5,4,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,
0,0,175,176,3,2,1,0,176,177,5,3,0,0,177,179,1,0,0,0,178,173,1,0,0,0,179,
182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,
0,0,183,184,5,0,0,1,184,1,1,0,0,0,185,187,5,5,0,0,186,185,1,0,0,0,186,187,
1,0,0,0,187,188,1,0,0,0,188,189,3,4,2,0,189,190,3,6,3,0,190,3,1,0,0,0,191,
193,5,6,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,215,1,0,0,0,194,216,5,7,
0,0,195,216,5,8,0,0,196,198,5,9,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,
199,1,0,0,0,199,216,5,10,0,0,200,216,5,11,0,0,201,203,5,12,0,0,202,201,1,
0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,216,5,13,0,0,205,216,5,14,0,0,
206,216,5,15,0,0,207,209,7,0,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,211,
1,0,0,0,210,212,5,9,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,
213,216,5,18,0,0,214,216,5,9,0,0,215,194,1,0,0,0,215,195,1,0,0,0,215,197,
1,0,0,0,215,200,1,0,0,0,215,202,1,0,0,0,215,205,1,0,0,0,215,206,1,0,0,0,
215,208,1,0,0,0,215,214,1,0,0,0,216,5,1,0,0,0,217,221,3,8,4,0,218,221,3,
10,5,0,219,221,3,12,6,0,220,217,1,0,0,0,220,218,1,0,0,0,220,219,1,0,0,0,
221,7,1,0,0,0,222,223,5,93,0,0,223,224,3,158,79,0,224,225,3,20,10,0,225,
226,5,19,0,0,226,227,5,93,0,0,227,239,1,0,0,0,228,229,5,20,0,0,229,231,5,
93,0,0,230,232,3,52,26,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,
233,234,3,158,79,0,234,235,3,20,10,0,235,236,5,19,0,0,236,237,5,93,0,0,237,
239,1,0,0,0,238,222,1,0,0,0,238,228,1,0,0,0,239,9,1,0,0,0,240,241,5,93,0,
0,241,259,5,21,0,0,242,243,3,14,7,0,243,245,3,126,63,0,244,246,3,152,76,
0,245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,249,3,52,26,0,248,
247,1,0,0,0,248,249,1,0,0,0,249,260,1,0,0,0,250,251,5,22,0,0,251,256,5,23,
0,0,252,254,3,16,8,0,253,252,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,
257,5,24,0,0,256,253,1,0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,260,5,25,
0,0,259,242,1,0,0,0,259,250,1,0,0,0,260,261,1,0,0,0,261,262,3,156,78,0,262,
11,1,0,0,0,263,264,5,93,0,0,264,265,5,21,0,0,265,266,5,26,0,0,266,267,5,
23,0,0,267,268,3,126,63,0,268,269,5,27,0,0,269,274,5,93,0,0,270,271,5,27,
0,0,271,273,5,93,0,0,272,270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,
275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,5,25,0,0,278,279,3,156,
78,0,279,13,1,0,0,0,280,282,7,1,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,
15,1,0,0,0,283,288,3,18,9,0,284,285,5,27,0,0,285,287,3,18,9,0,286,284,1,
0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,17,1,0,0,0,290,
288,1,0,0,0,291,292,5,93,0,0,292,293,3,156,78,0,293,19,1,0,0,0,294,303,3,
26,13,0,295,296,5,30,0,0,296,302,3,26,13,0,297,298,5,31,0,0,298,302,3,26,
13,0,299,302,3,72,36,0,300,302,3,74,37,0,301,295,1,0,0,0,301,297,1,0,0,0,
301,299,1,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,
1,0,0,0,304,317,1,0,0,0,305,303,1,0,0,0,306,308,5,32,0,0,307,309,3,22,11,
0,308,307,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,24,12,0,311,
310,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,315,3,160,80,0,314,313,1,
0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,5,3,0,0,317,306,1,0,0,0,317,
318,1,0,0,0,318,322,1,0,0,0,319,320,3,160,80,0,320,321,5,3,0,0,321,323,1,
0,0,0,322,319,1,0,0,0,322,323,1,0,0,0,323,21,1,0,0,0,324,325,5,94,0,0,325,
23,1,0,0,0,326,327,3,130,65,0,327,328,5,21,0,0,328,330,1,0,0,0,329,326,1,
0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,5,93,0,0,332,334,5,23,0,0,
333,335,3,150,75,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,337,
5,25,0,0,337,25,1,0,0,0,338,339,3,28,14,0,339,340,5,3,0,0,340,342,1,0,0,
0,341,338,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,27,
1,0,0,0,345,343,1,0,0,0,346,375,3,30,15,0,347,375,3,34,17,0,348,350,5,33,
0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,353,5,4,0,0,352,
351,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,356,5,34,0,0,355,354,1,0,
0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,359,5,35,0,0,358,357,1,0,0,0,358,
359,1,0,0,0,359,372,1,0,0,0,360,373,3,2,1,0,361,373,3,38,19,0,362,365,5,
36,0,0,363,366,3,2,1,0,364,366,3,38,19,0,365,363,1,0,0,0,365,364,1,0,0,0,
366,370,1,0,0,0,367,368,3,36,18,0,368,369,3,156,78,0,369,371,1,0,0,0,370,
367,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,360,1,0,0,0,372,361,1,0,
0,0,372,362,1,0,0,0,373,375,1,0,0,0,374,346,1,0,0,0,374,347,1,0,0,0,374,
349,1,0,0,0,375,29,1,0,0,0,376,392,5,37,0,0,377,378,5,93,0,0,378,379,5,21,
0,0,379,393,3,128,64,0,380,390,3,128,64,0,381,387,5,38,0,0,382,388,5,39,
0,0,383,384,5,40,0,0,384,385,3,32,16,0,385,386,5,41,0,0,386,388,1,0,0,0,
387,382,1,0,0,0,387,383,1,0,0,0,388,391,1,0,0,0,389,391,5,42,0,0,390,381,
1,0,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,377,1,0,0,0,
392,380,1,0,0,0,393,394,1,0,0,0,394,395,3,156,78,0,395,31,1,0,0,0,396,401,
5,93,0,0,397,398,5,27,0,0,398,400,5,93,0,0,399,397,1,0,0,0,400,403,1,0,0,
0,401,399,1,0,0,0,401,402,1,0,0,0,402,33,1,0,0,0,403,401,1,0,0,0,404,405,
5,20,0,0,405,407,3,126,63,0,406,408,3,52,26,0,407,406,1,0,0,0,407,408,1,
0,0,0,408,410,1,0,0,0,409,411,3,160,80,0,410,409,1,0,0,0,410,411,1,0,0,0,
411,35,1,0,0,0,412,413,5,43,0,0,413,415,3,126,63,0,414,416,3,52,26,0,415,
414,1,0,0,0,415,416,1,0,0,0,416,37,1,0,0,0,417,418,3,40,20,0,418,420,3,126,
63,0,419,421,3,152,76,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,
422,423,3,42,21,0,423,39,1,0,0,0,424,426,7,2,0,0,425,424,1,0,0,0,425,426,
1,0,0,0,426,428,1,0,0,0,427,429,7,3,0,0,428,427,1,0,0,0,428,429,1,0,0,0,
429,431,1,0,0,0,430,432,7,1,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,41,1,
0,0,0,433,438,3,44,22,0,434,435,5,27,0,0,435,437,3,44,22,0,436,434,1,0,0,
0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,43,1,0,0,0,440,438,
1,0,0,0,441,443,3,48,24,0,442,444,3,46,23,0,443,442,1,0,0,0,443,444,1,0,
0,0,444,445,1,0,0,0,445,446,3,156,78,0,446,45,1,0,0,0,447,448,5,49,0,0,448,
449,3,100,50,0,449,47,1,0,0,0,450,452,5,93,0,0,451,453,3,152,76,0,452,451,
1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,456,3,50,25,0,455,454,1,0,0,
0,455,456,1,0,0,0,456,49,1,0,0,0,457,460,3,52,26,0,458,459,5,21,0,0,459,
461,3,100,50,0,460,458,1,0,0,0,460,461,1,0,0,0,461,467,1,0,0,0,462,463,5,
21,0,0,463,467,3,100,50,0,464,465,5,50,0,0,465,467,3,100,50,0,466,457,1,
0,0,0,466,462,1,0,0,0,466,464,1,0,0,0,467,51,1,0,0,0,468,470,5,23,0,0,469,
471,3,54,27,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,5,
25,0,0,473,53,1,0,0,0,474,479,3,56,28,0,475,476,5,27,0,0,476,478,3,56,28,
0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,55,
1,0,0,0,481,479,1,0,0,0,482,485,3,58,29,0,483,485,3,62,31,0,484,482,1,0,
0,0,484,483,1,0,0,0,485,57,1,0,0,0,486,488,5,51,0,0,487,486,1,0,0,0,487,
488,1,0,0,0,488,490,1,0,0,0,489,491,5,4,0,0,490,489,1,0,0,0,490,491,1,0,
0,0,491,494,1,0,0,0,492,495,3,60,30,0,493,495,3,64,32,0,494,492,1,0,0,0,
494,493,1,0,0,0,495,59,1,0,0,0,496,498,3,128,64,0,497,499,3,50,25,0,498,
497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,3,158,79,0,501,61,1,
0,0,0,502,504,5,33,0,0,503,505,5,51,0,0,504,503,1,0,0,0,504,505,1,0,0,0,
505,507,1,0,0,0,506,508,5,4,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,512,
1,0,0,0,509,513,3,70,35,0,510,513,3,66,33,0,511,513,3,64,32,0,512,509,1,
0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,63,1,0,0,0,514,517,5,36,0,0,515,
518,3,70,35,0,516,518,3,66,33,0,517,515,1,0,0,0,517,516,1,0,0,0,518,520,
1,0,0,0,519,521,3,36,18,0,520,519,1,0,0,0,520,521,1,0,0,0,521,65,1,0,0,0,
522,523,3,40,20,0,523,524,3,126,63,0,524,525,3,68,34,0,525,67,1,0,0,0,526,
527,3,48,24,0,527,528,3,156,78,0,528,69,1,0,0,0,529,530,3,4,2,0,530,531,
3,10,5,0,531,71,1,0,0,0,532,534,5,52,0,0,533,532,1,0,0,0,533,534,1,0,0,0,
534,535,1,0,0,0,535,541,5,53,0,0,536,537,3,76,38,0,537,538,5,3,0,0,538,540,
1,0,0,0,539,536,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,
542,73,1,0,0,0,543,541,1,0,0,0,544,546,5,52,0,0,545,544,1,0,0,0,545,546,
1,0,0,0,546,547,1,0,0,0,547,553,5,54,0,0,548,549,3,78,39,0,549,550,5,3,0,
0,550,552,1,0,0,0,551,548,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,
1,0,0,0,554,75,1,0,0,0,555,553,1,0,0,0,556,559,3,102,51,0,557,558,5,21,0,
0,558,560,3,100,50,0,559,557,1,0,0,0,559,560,1,0,0,0,560,566,1,0,0,0,561,
566,3,80,40,0,562,566,3,84,42,0,563,566,3,98,49,0,564,566,3,94,47,0,565,
556,1,0,0,0,565,561,1,0,0,0,565,562,1,0,0,0,565,563,1,0,0,0,565,564,1,0,
0,0,566,567,1,0,0,0,567,568,3,156,78,0,568,77,1,0,0,0,569,573,3,130,65,0,
570,571,5,50,0,0,571,574,3,100,50,0,572,574,3,132,66,0,573,570,1,0,0,0,573,
572,1,0,0,0,574,589,1,0,0,0,575,576,5,23,0,0,576,577,3,148,74,0,577,578,
5,25,0,0,578,579,5,50,0,0,579,580,3,130,65,0,580,581,3,132,66,0,581,589,
1,0,0,0,582,589,5,55,0,0,583,589,5,56,0,0,584,589,3,82,41,0,585,589,3,86,
43,0,586,589,3,92,46,0,587,589,3,96,48,0,588,569,1,0,0,0,588,575,1,0,0,0,
588,582,1,0,0,0,588,583,1,0,0,0,588,584,1,0,0,0,588,585,1,0,0,0,588,586,
1,0,0,0,588,587,1,0,0,0,589,590,1,0,0,0,590,591,3,156,78,0,591,79,1,0,0,
0,592,593,5,49,0,0,593,594,3,100,50,0,594,600,5,57,0,0,595,596,3,76,38,0,
596,597,5,3,0,0,597,599,1,0,0,0,598,595,1,0,0,0,599,602,1,0,0,0,600,598,
1,0,0,0,600,601,1,0,0,0,601,616,1,0,0,0,602,600,1,0,0,0,603,604,5,58,0,0,
604,605,3,100,50,0,605,611,5,57,0,0,606,607,3,76,38,0,607,608,5,3,0,0,608,
610,1,0,0,0,609,606,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,
0,0,612,615,1,0,0,0,613,611,1,0,0,0,614,603,1,0,0,0,615,618,1,0,0,0,616,
614,1,0,0,0,616,617,1,0,0,0,617,628,1,0,0,0,618,616,1,0,0,0,619,625,5,59,
0,0,620,621,3,76,38,0,621,622,5,3,0,0,622,624,1,0,0,0,623,620,1,0,0,0,624,
627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,629,1,0,0,0,627,625,1,0,
0,0,628,619,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,5,19,0,0,631,
632,5,49,0,0,632,81,1,0,0,0,633,634,5,49,0,0,634,635,3,100,50,0,635,641,
5,57,0,0,636,637,3,78,39,0,637,638,5,3,0,0,638,640,1,0,0,0,639,636,1,0,0,
0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,657,1,0,0,0,643,641,
1,0,0,0,644,645,5,58,0,0,645,646,3,100,50,0,646,652,5,57,0,0,647,648,3,78,
39,0,648,649,5,3,0,0,649,651,1,0,0,0,650,647,1,0,0,0,651,654,1,0,0,0,652,
650,1,0,0,0,652,653,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,655,644,1,0,
0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,669,1,0,0,0,659,
657,1,0,0,0,660,666,5,59,0,0,661,662,3,78,39,0,662,663,5,3,0,0,663,665,1,
0,0,0,664,661,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,
670,1,0,0,0,668,666,1,0,0,0,669,660,1,0,0,0,669,670,1,0,0,0,670,671,1,0,
0,0,671,672,5,19,0,0,672,673,5,49,0,0,673,83,1,0,0,0,674,675,5,60,0,0,675,
676,3,88,44,0,676,682,5,61,0,0,677,678,3,76,38,0,678,679,5,3,0,0,679,681,
1,0,0,0,680,677,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,
683,685,1,0,0,0,684,682,1,0,0,0,685,686,5,19,0,0,686,687,5,60,0,0,687,85,
1,0,0,0,688,689,5,60,0,0,689,690,3,88,44,0,690,696,5,61,0,0,691,692,3,78,
39,0,692,693,5,3,0,0,693,695,1,0,0,0,694,691,1,0,0,0,695,698,1,0,0,0,696,
694,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,0,0,699,700,5,19,
0,0,700,701,5,60,0,0,701,87,1,0,0,0,702,707,3,90,45,0,703,704,5,27,0,0,704,
706,3,90,45,0,705,703,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,
0,0,0,708,89,1,0,0,0,709,707,1,0,0,0,710,713,5,93,0,0,711,712,5,62,0,0,712,
714,3,100,50,0,713,711,1,0,0,0,713,714,1,0,0,0,714,91,1,0,0,0,715,716,5,
63,0,0,716,717,3,100,50,0,717,723,5,61,0,0,718,719,3,78,39,0,719,720,5,3,
0,0,720,722,1,0,0,0,721,718,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,
724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,0,726,727,5,19,0,0,727,728,5,63,
0,0,728,93,1,0,0,0,729,730,5,64,0,0,730,731,3,100,50,0,731,737,5,57,0,0,
732,733,3,76,38,0,733,734,5,3,0,0,734,736,1,0,0,0,735,732,1,0,0,0,736,739,
1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,753,1,0,0,0,739,737,1,0,0,0,
740,741,5,65,0,0,741,742,3,100,50,0,742,748,5,57,0,0,743,744,3,76,38,0,744,
745,5,3,0,0,745,747,1,0,0,0,746,743,1,0,0,0,747,750,1,0,0,0,748,746,1,0,
0,0,748,749,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,751,740,1,0,0,0,752,
755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,753,1,0,
0,0,756,757,5,19,0,0,757,758,5,64,0,0,758,95,1,0,0,0,759,760,5,64,0,0,760,
761,3,100,50,0,761,767,5,57,0,0,762,763,3,78,39,0,763,764,5,3,0,0,764,766,
1,0,0,0,765,762,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,
768,783,1,0,0,0,769,767,1,0,0,0,770,771,5,65,0,0,771,772,3,100,50,0,772,
778,5,57,0,0,773,774,3,78,39,0,774,775,5,3,0,0,775,777,1,0,0,0,776,773,1,
0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,782,1,0,0,0,780,
778,1,0,0,0,781,770,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,
0,0,784,786,1,0,0,0,785,783,1,0,0,0,786,787,5,19,0,0,787,788,5,64,0,0,788,
97,1,0,0,0,789,790,5,66,0,0,790,791,5,23,0,0,791,792,3,130,65,0,792,793,
5,27,0,0,793,794,3,130,65,0,794,795,5,25,0,0,795,99,1,0,0,0,796,815,3,102,
51,0,797,798,5,49,0,0,798,799,3,100,50,0,799,800,5,57,0,0,800,808,3,100,
50,0,801,802,5,58,0,0,802,803,3,100,50,0,803,804,5,57,0,0,804,805,3,100,
50,0,805,807,1,0,0,0,806,801,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,
809,1,0,0,0,809,811,1,0,0,0,810,808,1,0,0,0,811,812,5,59,0,0,812,813,3,100,
50,0,813,815,1,0,0,0,814,796,1,0,0,0,814,797,1,0,0,0,815,101,1,0,0,0,816,
823,3,104,52,0,817,818,5,24,0,0,818,821,3,104,52,0,819,820,5,24,0,0,820,
822,3,104,52,0,821,819,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,817,1,
0,0,0,823,824,1,0,0,0,824,103,1,0,0,0,825,830,3,106,53,0,826,827,5,67,0,
0,827,829,3,106,53,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,
831,1,0,0,0,831,105,1,0,0,0,832,830,1,0,0,0,833,838,3,108,54,0,834,835,5,
68,0,0,835,837,3,108,54,0,836,834,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,
0,838,839,1,0,0,0,839,107,1,0,0,0,840,838,1,0,0,0,841,843,5,69,0,0,842,841,
1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,3,110,55,0,845,109,1,0,0,
0,846,850,3,114,57,0,847,848,3,112,56,0,848,849,3,114,57,0,849,851,1,0,0,
0,850,847,1,0,0,0,850,851,1,0,0,0,851,111,1,0,0,0,852,853,7,4,0,0,853,113,
1,0,0,0,854,856,3,116,58,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,
0,857,863,3,118,59,0,858,859,3,116,58,0,859,860,3,118,59,0,860,862,1,0,0,
0,861,858,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,115,
1,0,0,0,865,863,1,0,0,0,866,867,7,5,0,0,867,117,1,0,0,0,868,874,3,122,61,
0,869,870,3,120,60,0,870,871,3,122,61,0,871,873,1,0,0,0,872,869,1,0,0,0,
873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,875,119,1,0,0,0,876,874,
1,0,0,0,877,878,7,6,0,0,878,121,1,0,0,0,879,882,3,124,62,0,880,881,7,7,0,
0,881,883,3,124,62,0,882,880,1,0,0,0,882,883,1,0,0,0,883,123,1,0,0,0,884,
915,5,95,0,0,885,915,5,94,0,0,886,915,5,84,0,0,887,915,5,85,0,0,888,889,
7,8,0,0,889,915,3,132,66,0,890,892,3,130,65,0,891,893,3,132,66,0,892,891,
1,0,0,0,892,893,1,0,0,0,893,915,1,0,0,0,894,895,5,23,0,0,895,896,3,148,74,
0,896,897,5,25,0,0,897,915,1,0,0,0,898,899,5,86,0,0,899,904,3,150,75,0,900,
901,5,3,0,0,901,903,3,150,75,0,902,900,1,0,0,0,903,906,1,0,0,0,904,902,1,
0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,1,0,0,0,907,908,5,87,0,0,908,
915,1,0,0,0,909,910,5,40,0,0,910,911,3,138,69,0,911,912,5,41,0,0,912,915,
1,0,0,0,913,915,5,19,0,0,914,884,1,0,0,0,914,885,1,0,0,0,914,886,1,0,0,0,
914,887,1,0,0,0,914,888,1,0,0,0,914,890,1,0,0,0,914,894,1,0,0,0,914,898,
1,0,0,0,914,909,1,0,0,0,914,913,1,0,0,0,915,125,1,0,0,0,916,918,5,38,0,0,
917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,920,3,128,64,0,920,127,
1,0,0,0,921,926,5,93,0,0,922,923,5,38,0,0,923,925,5,93,0,0,924,922,1,0,0,
0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,129,1,0,0,0,928,926,
1,0,0,0,929,931,5,38,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,
932,934,5,93,0,0,933,935,3,152,76,0,934,933,1,0,0,0,934,935,1,0,0,0,935,
943,1,0,0,0,936,937,5,38,0,0,937,939,5,93,0,0,938,940,3,152,76,0,939,938,
1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,936,1,0,0,0,942,945,1,0,0,0,
943,941,1,0,0,0,943,944,1,0,0,0,944,131,1,0,0,0,945,943,1,0,0,0,946,948,
5,23,0,0,947,949,3,134,67,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,
0,0,950,951,5,25,0,0,951,133,1,0,0,0,952,957,3,100,50,0,953,954,5,27,0,0,
954,958,3,136,68,0,955,956,5,60,0,0,956,958,3,88,44,0,957,953,1,0,0,0,957,
955,1,0,0,0,957,958,1,0,0,0,958,966,1,0,0,0,959,962,3,146,73,0,960,961,5,
27,0,0,961,963,3,136,68,0,962,960,1,0,0,0,962,963,1,0,0,0,963,966,1,0,0,
0,964,966,3,140,70,0,965,952,1,0,0,0,965,959,1,0,0,0,965,964,1,0,0,0,966,
135,1,0,0,0,967,970,3,144,72,0,968,969,5,27,0,0,969,971,3,136,68,0,970,968,
1,0,0,0,970,971,1,0,0,0,971,974,1,0,0,0,972,974,3,140,70,0,973,967,1,0,0,
0,973,972,1,0,0,0,974,137,1,0,0,0,975,985,3,100,50,0,976,977,5,27,0,0,977,
979,3,100,50,0,978,976,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,
0,0,0,981,986,1,0,0,0,982,980,1,0,0,0,983,984,5,60,0,0,984,986,3,88,44,0,
985,980,1,0,0,0,985,983,1,0,0,0,986,139,1,0,0,0,987,992,3,142,71,0,988,989,
5,27,0,0,989,991,3,142,71,0,990,988,1,0,0,0,991,994,1,0,0,0,992,990,1,0,
0,0,992,993,1,0,0,0,993,141,1,0,0,0,994,992,1,0,0,0,995,996,5,93,0,0,996,
997,5,21,0,0,997,998,3,144,72,0,998,143,1,0,0,0,999,1002,3,146,73,0,1000,
1002,3,100,50,0,1001,999,1,0,0,0,1001,1000,1,0,0,0,1002,145,1,0,0,0,1003,
1004,5,18,0,0,1004,1005,3,126,63,0,1005,1007,5,23,0,0,1006,1008,3,140,70,
0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,5,25,0,
0,1010,147,1,0,0,0,1011,1013,3,100,50,0,1012,1011,1,0,0,0,1012,1013,1,0,
0,0,1013,1020,1,0,0,0,1014,1016,5,27,0,0,1015,1017,3,100,50,0,1016,1015,
1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1014,1,0,0,0,1019,1022,
1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,149,1,0,0,0,1022,1020,1,
0,0,0,1023,1028,3,100,50,0,1024,1025,5,27,0,0,1025,1027,3,100,50,0,1026,
1024,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,
151,1,0,0,0,1030,1028,1,0,0,0,1031,1032,5,86,0,0,1032,1037,3,154,77,0,1033,
1034,5,27,0,0,1034,1036,3,154,77,0,1035,1033,1,0,0,0,1036,1039,1,0,0,0,1037,
1035,1,0,0,0,1037,1038,1,0,0,0,1038,1040,1,0,0,0,1039,1037,1,0,0,0,1040,
1041,5,87,0,0,1041,153,1,0,0,0,1042,1045,5,24,0,0,1043,1045,3,100,50,0,1044,
1042,1,0,0,0,1044,1043,1,0,0,0,1045,155,1,0,0,0,1046,1048,3,158,79,0,1047,
1049,3,160,80,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,157,1,0,0,0,1050,
1055,5,94,0,0,1051,1052,5,76,0,0,1052,1054,5,94,0,0,1053,1051,1,0,0,0,1054,
1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1059,1,0,0,0,1057,
1055,1,0,0,0,1058,1050,1,0,0,0,1058,1059,1,0,0,0,1059,159,1,0,0,0,1060,1061,
5,88,0,0,1061,1062,3,52,26,0,1062,161,1,0,0,0,140,163,167,170,173,180,186,
192,197,202,208,211,215,220,231,238,245,248,253,256,259,274,281,288,301,
303,308,311,314,317,322,329,334,343,349,352,355,358,365,370,372,374,387,
390,392,401,407,410,415,420,425,428,431,438,443,452,455,460,466,470,479,
484,487,490,494,498,504,507,512,517,520,533,541,545,553,559,565,573,588,
600,611,616,625,628,641,652,657,666,669,682,696,707,713,723,737,748,753,
767,778,783,808,814,821,823,830,838,842,850,855,863,874,882,892,904,914,
917,926,930,934,939,943,948,957,962,965,970,973,980,985,992,1001,1007,1012,
1016,1020,1028,1037,1044,1048,1055,1058];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class modelicaParser extends antlr4.Parser {

    static grammarFileName = "modelica.g4";
    static literalNames = [ null, "'\\uFEFF'", "'within'", "';'", "'final'", 
                            "'encapsulated'", "'partial'", "'class'", "'model'", 
                            "'operator'", "'record'", "'block'", "'expandable'", 
                            "'connector'", "'type'", "'package'", "'pure'", 
                            "'impure'", "'function'", "'end'", "'extends'", 
                            "'='", "'enumeration'", "'('", "':'", "')'", 
                            "'der'", "','", "'input'", "'output'", "'public'", 
                            "'protected'", "'external'", "'redeclare'", 
                            "'inner'", "'outer'", "'replaceable'", "'import'", 
                            "'.'", "'*'", "'{'", "'}'", "'.*'", "'constrainedby'", 
                            "'flow'", "'stream'", "'discrete'", "'parameter'", 
                            "'constant'", "'if'", "':='", "'each'", "'initial'", 
                            "'equation'", "'algorithm'", "'break'", "'return'", 
                            "'then'", "'elseif'", "'else'", "'for'", "'loop'", 
                            "'in'", "'while'", "'when'", "'elsewhen'", "'connect'", 
                            "'or'", "'and'", "'not'", "'<'", "'<='", "'>'", 
                            "'>='", "'=='", "'<>'", "'+'", "'-'", "'.+'", 
                            "'.-'", "'/'", "'./'", "'^'", "'.^'", "'false'", 
                            "'true'", "'['", "']'", "'annotation'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "BOM", "WS", "LINE_COMMENT", "ML_COMMENT", 
                             "IDENT", "STRING", "UNSIGNED_NUMBER" ];
    static ruleNames = [ "stored_definition", "class_definition", "class_prefixes", 
                         "class_specifier", "long_class_specifier", "short_class_specifier", 
                         "der_class_specifier", "base_prefix", "enum_list", 
                         "enumeration_literal", "composition", "language_specification", 
                         "external_function_call", "element_list", "element", 
                         "import_clause", "import_list", "extends_clause", 
                         "constraining_clause", "component_clause", "type_prefix", 
                         "component_list", "component_declaration", "condition_attribute", 
                         "declaration", "modification", "class_modification", 
                         "argument_list", "argument", "element_modification_or_replaceable", 
                         "element_modification", "element_redeclaration", 
                         "element_replaceable", "component_clause1", "component_declaration1", 
                         "short_class_definition", "equation_section", "algorithm_section", 
                         "equation", "statement", "if_equation", "if_statement", 
                         "for_equation", "for_statement", "for_indices", 
                         "for_index", "while_statement", "when_equation", 
                         "when_statement", "connect_clause", "expression", 
                         "simple_expression", "logical_expression", "logical_term", 
                         "logical_factor", "relation", "relational_operator", 
                         "arithmetic_expression", "add_operator", "term", 
                         "mul_operator", "factor", "primary", "type_specifier", 
                         "name", "component_reference", "function_call_args", 
                         "function_arguments", "function_arguments_non_first", 
                         "array_arguments", "named_arguments", "named_argument", 
                         "function_argument", "function_partial_application", 
                         "output_expression_list", "expression_list", "array_subscripts", 
                         "subscript", "comment", "string_comment", "annotation_comment" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = modelicaParser.ruleNames;
        this.literalNames = modelicaParser.literalNames;
        this.symbolicNames = modelicaParser.symbolicNames;
    }



	stored_definition() {
	    let localctx = new Stored_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, modelicaParser.RULE_stored_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 162;
	            this.match(modelicaParser.T__0);
	        }

	        this.state = 170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 165;
	            this.match(modelicaParser.T__1);
	            this.state = 167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 166;
	                this.name();
	            }

	            this.state = 169;
	            this.match(modelicaParser.T__2);
	        }

	        this.state = 180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 524272) !== 0)) {
	            this.state = 173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 172;
	                this.match(modelicaParser.T__3);
	            }

	            this.state = 175;
	            this.class_definition();
	            this.state = 176;
	            this.match(modelicaParser.T__2);
	            this.state = 182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 183;
	        this.match(modelicaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_definition() {
	    let localctx = new Class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, modelicaParser.RULE_class_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 185;
	            this.match(modelicaParser.T__4);
	        }

	        this.state = 188;
	        this.class_prefixes();
	        this.state = 189;
	        this.class_specifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_prefixes() {
	    let localctx = new Class_prefixesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, modelicaParser.RULE_class_prefixes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 191;
	            this.match(modelicaParser.T__5);
	        }

	        this.state = 215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 194;
	            this.match(modelicaParser.T__6);
	            break;

	        case 2:
	            this.state = 195;
	            this.match(modelicaParser.T__7);
	            break;

	        case 3:
	            this.state = 197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 196;
	                this.match(modelicaParser.T__8);
	            }

	            this.state = 199;
	            this.match(modelicaParser.T__9);
	            break;

	        case 4:
	            this.state = 200;
	            this.match(modelicaParser.T__10);
	            break;

	        case 5:
	            this.state = 202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 201;
	                this.match(modelicaParser.T__11);
	            }

	            this.state = 204;
	            this.match(modelicaParser.T__12);
	            break;

	        case 6:
	            this.state = 205;
	            this.match(modelicaParser.T__13);
	            break;

	        case 7:
	            this.state = 206;
	            this.match(modelicaParser.T__14);
	            break;

	        case 8:
	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16 || _la===17) {
	                this.state = 207;
	                _la = this._input.LA(1);
	                if(!(_la===16 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 210;
	                this.match(modelicaParser.T__8);
	            }

	            this.state = 213;
	            this.match(modelicaParser.T__17);
	            break;

	        case 9:
	            this.state = 214;
	            this.match(modelicaParser.T__8);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_specifier() {
	    let localctx = new Class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, modelicaParser.RULE_class_specifier);
	    try {
	        this.state = 220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 217;
	            this.long_class_specifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 218;
	            this.short_class_specifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 219;
	            this.der_class_specifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	long_class_specifier() {
	    let localctx = new Long_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, modelicaParser.RULE_long_class_specifier);
	    var _la = 0;
	    try {
	        this.state = 238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 222;
	            this.match(modelicaParser.IDENT);
	            this.state = 223;
	            this.string_comment();
	            this.state = 224;
	            this.composition();
	            this.state = 225;
	            this.match(modelicaParser.T__18);
	            this.state = 226;
	            this.match(modelicaParser.IDENT);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this.match(modelicaParser.T__19);
	            this.state = 229;
	            this.match(modelicaParser.IDENT);
	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 230;
	                this.class_modification();
	            }

	            this.state = 233;
	            this.string_comment();
	            this.state = 234;
	            this.composition();
	            this.state = 235;
	            this.match(modelicaParser.T__18);
	            this.state = 236;
	            this.match(modelicaParser.IDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	short_class_specifier() {
	    let localctx = new Short_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, modelicaParser.RULE_short_class_specifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        this.match(modelicaParser.IDENT);
	        this.state = 241;
	        this.match(modelicaParser.T__20);
	        this.state = 259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 29:
	        case 38:
	        case 93:
	            this.state = 242;
	            this.base_prefix();
	            this.state = 243;
	            this.type_specifier();
	            this.state = 245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 244;
	                this.array_subscripts();
	            }

	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 247;
	                this.class_modification();
	            }

	            break;
	        case 22:
	            this.state = 250;
	            this.match(modelicaParser.T__21);
	            this.state = 251;
	            this.match(modelicaParser.T__22);
	            this.state = 256;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 25:
	            case 93:
	                this.state = 253;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===93) {
	                    this.state = 252;
	                    this.enum_list();
	                }

	                break;
	            case 24:
	                this.state = 255;
	                this.match(modelicaParser.T__23);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 258;
	            this.match(modelicaParser.T__24);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 261;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	der_class_specifier() {
	    let localctx = new Der_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, modelicaParser.RULE_der_class_specifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(modelicaParser.IDENT);
	        this.state = 264;
	        this.match(modelicaParser.T__20);
	        this.state = 265;
	        this.match(modelicaParser.T__25);
	        this.state = 266;
	        this.match(modelicaParser.T__22);
	        this.state = 267;
	        this.type_specifier();
	        this.state = 268;
	        this.match(modelicaParser.T__26);
	        this.state = 269;
	        this.match(modelicaParser.IDENT);
	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 270;
	            this.match(modelicaParser.T__26);
	            this.state = 271;
	            this.match(modelicaParser.IDENT);
	            this.state = 276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 277;
	        this.match(modelicaParser.T__24);
	        this.state = 278;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_prefix() {
	    let localctx = new Base_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, modelicaParser.RULE_base_prefix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28 || _la===29) {
	            this.state = 280;
	            _la = this._input.LA(1);
	            if(!(_la===28 || _la===29)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_list() {
	    let localctx = new Enum_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, modelicaParser.RULE_enum_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        this.enumeration_literal();
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 284;
	            this.match(modelicaParser.T__26);
	            this.state = 285;
	            this.enumeration_literal();
	            this.state = 290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeration_literal() {
	    let localctx = new Enumeration_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, modelicaParser.RULE_enumeration_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.match(modelicaParser.IDENT);
	        this.state = 292;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	composition() {
	    let localctx = new CompositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, modelicaParser.RULE_composition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        this.element_list();
	        this.state = 303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 29360131) !== 0)) {
	            this.state = 301;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 295;
	                this.match(modelicaParser.T__29);
	                this.state = 296;
	                this.element_list();
	                break;

	            case 2:
	                this.state = 297;
	                this.match(modelicaParser.T__30);
	                this.state = 298;
	                this.element_list();
	                break;

	            case 3:
	                this.state = 299;
	                this.equation_section();
	                break;

	            case 4:
	                this.state = 300;
	                this.algorithm_section();
	                break;

	            }
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 306;
	            this.match(modelicaParser.T__31);
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===94) {
	                this.state = 307;
	                this.language_specification();
	            }

	            this.state = 311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38 || _la===93) {
	                this.state = 310;
	                this.external_function_call();
	            }

	            this.state = 314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===88) {
	                this.state = 313;
	                this.annotation_comment();
	            }

	            this.state = 316;
	            this.match(modelicaParser.T__2);
	        }

	        this.state = 322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 319;
	            this.annotation_comment();
	            this.state = 320;
	            this.match(modelicaParser.T__2);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	language_specification() {
	    let localctx = new Language_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, modelicaParser.RULE_language_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(modelicaParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_function_call() {
	    let localctx = new External_function_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, modelicaParser.RULE_external_function_call);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 326;
	            this.component_reference();
	            this.state = 327;
	            this.match(modelicaParser.T__20);

	        }
	        this.state = 331;
	        this.match(modelicaParser.IDENT);
	        this.state = 332;
	        this.match(modelicaParser.T__22);
	        this.state = 334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 76087296) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2147502085) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 919311) !== 0)) {
	            this.state = 333;
	            this.expression_list();
	        }

	        this.state = 336;
	        this.match(modelicaParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_list() {
	    let localctx = new Element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, modelicaParser.RULE_element_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 806879216) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 63551) !== 0) || _la===93) {
	            this.state = 338;
	            this.element();
	            this.state = 339;
	            this.match(modelicaParser.T__2);
	            this.state = 345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, modelicaParser.RULE_element);
	    var _la = 0;
	    try {
	        this.state = 374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 346;
	            this.import_clause();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 347;
	            this.extends_clause();
	            break;
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 28:
	        case 29:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 38:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 93:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 348;
	                this.match(modelicaParser.T__32);
	            }

	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 351;
	                this.match(modelicaParser.T__3);
	            }

	            this.state = 355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 354;
	                this.match(modelicaParser.T__33);
	            }

	            this.state = 358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 357;
	                this.match(modelicaParser.T__34);
	            }

	            this.state = 372;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 11:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	                this.state = 360;
	                this.class_definition();
	                break;
	            case 28:
	            case 29:
	            case 38:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 93:
	                this.state = 361;
	                this.component_clause();
	                break;
	            case 36:
	                this.state = 362;
	                this.match(modelicaParser.T__35);
	                this.state = 365;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 5:
	                case 6:
	                case 7:
	                case 8:
	                case 9:
	                case 10:
	                case 11:
	                case 12:
	                case 13:
	                case 14:
	                case 15:
	                case 16:
	                case 17:
	                case 18:
	                    this.state = 363;
	                    this.class_definition();
	                    break;
	                case 28:
	                case 29:
	                case 38:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 93:
	                    this.state = 364;
	                    this.component_clause();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 370;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===43) {
	                    this.state = 367;
	                    this.constraining_clause();
	                    this.state = 368;
	                    this.comment();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_clause() {
	    let localctx = new Import_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, modelicaParser.RULE_import_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.match(modelicaParser.T__36);
	        this.state = 392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 377;
	            this.match(modelicaParser.IDENT);
	            this.state = 378;
	            this.match(modelicaParser.T__20);
	            this.state = 379;
	            this.name();
	            break;

	        case 2:
	            this.state = 380;
	            this.name();
	            this.state = 390;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 38:
	            	this.state = 381;
	            	this.match(modelicaParser.T__37);
	            	this.state = 387;
	            	this._errHandler.sync(this);
	            	switch(this._input.LA(1)) {
	            	case 39:
	            	    this.state = 382;
	            	    this.match(modelicaParser.T__38);
	            	    break;
	            	case 40:
	            	    this.state = 383;
	            	    this.match(modelicaParser.T__39);
	            	    this.state = 384;
	            	    this.import_list();
	            	    this.state = 385;
	            	    this.match(modelicaParser.T__40);
	            	    break;
	            	default:
	            	    throw new antlr4.error.NoViableAltException(this);
	            	}
	            	break;
	            case 42:
	            	this.state = 389;
	            	this.match(modelicaParser.T__41);
	            	break;
	            case 3:
	            case 88:
	            case 94:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        }
	        this.state = 394;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_list() {
	    let localctx = new Import_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, modelicaParser.RULE_import_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.match(modelicaParser.IDENT);
	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 397;
	            this.match(modelicaParser.T__26);
	            this.state = 398;
	            this.match(modelicaParser.IDENT);
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extends_clause() {
	    let localctx = new Extends_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, modelicaParser.RULE_extends_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(modelicaParser.T__19);
	        this.state = 405;
	        this.type_specifier();
	        this.state = 407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 406;
	            this.class_modification();
	        }

	        this.state = 410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 409;
	            this.annotation_comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraining_clause() {
	    let localctx = new Constraining_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, modelicaParser.RULE_constraining_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(modelicaParser.T__42);
	        this.state = 413;
	        this.type_specifier();
	        this.state = 415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 414;
	            this.class_modification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_clause() {
	    let localctx = new Component_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, modelicaParser.RULE_component_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.type_prefix();
	        this.state = 418;
	        this.type_specifier();
	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 419;
	            this.array_subscripts();
	        }

	        this.state = 422;
	        this.component_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_prefix() {
	    let localctx = new Type_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, modelicaParser.RULE_type_prefix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44 || _la===45) {
	            this.state = 424;
	            _la = this._input.LA(1);
	            if(!(_la===44 || _la===45)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 7) !== 0)) {
	            this.state = 427;
	            _la = this._input.LA(1);
	            if(!(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 7) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28 || _la===29) {
	            this.state = 430;
	            _la = this._input.LA(1);
	            if(!(_la===28 || _la===29)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_list() {
	    let localctx = new Component_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, modelicaParser.RULE_component_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.component_declaration();
	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 434;
	            this.match(modelicaParser.T__26);
	            this.state = 435;
	            this.component_declaration();
	            this.state = 440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_declaration() {
	    let localctx = new Component_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, modelicaParser.RULE_component_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        this.declaration();
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 442;
	            this.condition_attribute();
	        }

	        this.state = 445;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition_attribute() {
	    let localctx = new Condition_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, modelicaParser.RULE_condition_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(modelicaParser.T__48);
	        this.state = 448;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, modelicaParser.RULE_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(modelicaParser.IDENT);
	        this.state = 452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 451;
	            this.array_subscripts();
	        }

	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) === 0 && ((1 << (_la - 21)) & 536870917) !== 0)) {
	            this.state = 454;
	            this.modification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modification() {
	    let localctx = new ModificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, modelicaParser.RULE_modification);
	    var _la = 0;
	    try {
	        this.state = 466;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 457;
	            this.class_modification();
	            this.state = 460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 458;
	                this.match(modelicaParser.T__20);
	                this.state = 459;
	                this.expression();
	            }

	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 462;
	            this.match(modelicaParser.T__20);
	            this.state = 463;
	            this.expression();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 464;
	            this.match(modelicaParser.T__49);
	            this.state = 465;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_modification() {
	    let localctx = new Class_modificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, modelicaParser.RULE_class_modification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this.match(modelicaParser.T__22);
	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 262153) !== 0) || _la===93) {
	            this.state = 469;
	            this.argument_list();
	        }

	        this.state = 472;
	        this.match(modelicaParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, modelicaParser.RULE_argument_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.argument();
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 475;
	            this.match(modelicaParser.T__26);
	            this.state = 476;
	            this.argument();
	            this.state = 481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, modelicaParser.RULE_argument);
	    try {
	        this.state = 484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	        case 36:
	        case 51:
	        case 93:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 482;
	            this.element_modification_or_replaceable();
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 483;
	            this.element_redeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_modification_or_replaceable() {
	    let localctx = new Element_modification_or_replaceableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, modelicaParser.RULE_element_modification_or_replaceable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 486;
	            this.match(modelicaParser.T__50);
	        }

	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 489;
	            this.match(modelicaParser.T__3);
	        }

	        this.state = 494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	            this.state = 492;
	            this.element_modification();
	            break;
	        case 36:
	            this.state = 493;
	            this.element_replaceable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_modification() {
	    let localctx = new Element_modificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, modelicaParser.RULE_element_modification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.name();
	        this.state = 498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) === 0 && ((1 << (_la - 21)) & 536870917) !== 0)) {
	            this.state = 497;
	            this.modification();
	        }

	        this.state = 500;
	        this.string_comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_redeclaration() {
	    let localctx = new Element_redeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, modelicaParser.RULE_element_redeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.match(modelicaParser.T__32);
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 503;
	            this.match(modelicaParser.T__50);
	        }

	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 506;
	            this.match(modelicaParser.T__3);
	        }

	        this.state = 512;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	            this.state = 509;
	            this.short_class_definition();
	            break;
	        case 28:
	        case 29:
	        case 38:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 93:
	            this.state = 510;
	            this.component_clause1();
	            break;
	        case 36:
	            this.state = 511;
	            this.element_replaceable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_replaceable() {
	    let localctx = new Element_replaceableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, modelicaParser.RULE_element_replaceable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.match(modelicaParser.T__35);
	        this.state = 517;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	            this.state = 515;
	            this.short_class_definition();
	            break;
	        case 28:
	        case 29:
	        case 38:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 93:
	            this.state = 516;
	            this.component_clause1();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 519;
	            this.constraining_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_clause1() {
	    let localctx = new Component_clause1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, modelicaParser.RULE_component_clause1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.type_prefix();
	        this.state = 523;
	        this.type_specifier();
	        this.state = 524;
	        this.component_declaration1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_declaration1() {
	    let localctx = new Component_declaration1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, modelicaParser.RULE_component_declaration1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.declaration();
	        this.state = 527;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	short_class_definition() {
	    let localctx = new Short_class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, modelicaParser.RULE_short_class_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.class_prefixes();
	        this.state = 530;
	        this.short_class_specifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equation_section() {
	    let localctx = new Equation_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, modelicaParser.RULE_equation_section);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 532;
	            this.match(modelicaParser.T__51);
	        }

	        this.state = 535;
	        this.match(modelicaParser.T__52);
	        this.state = 541;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 536;
	                this.equation();
	                this.state = 537;
	                this.match(modelicaParser.T__2); 
	            }
	            this.state = 543;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	algorithm_section() {
	    let localctx = new Algorithm_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, modelicaParser.RULE_algorithm_section);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 544;
	            this.match(modelicaParser.T__51);
	        }

	        this.state = 547;
	        this.match(modelicaParser.T__53);
	        this.state = 553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	            this.state = 548;
	            this.statement();
	            this.state = 549;
	            this.match(modelicaParser.T__2);
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equation() {
	    let localctx = new EquationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, modelicaParser.RULE_equation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 19:
	        case 23:
	        case 26:
	        case 38:
	        case 40:
	        case 52:
	        case 69:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 84:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 95:
	            this.state = 556;
	            this.simple_expression();
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 557;
	                this.match(modelicaParser.T__20);
	                this.state = 558;
	                this.expression();
	            }

	            break;
	        case 49:
	            this.state = 561;
	            this.if_equation();
	            break;
	        case 60:
	            this.state = 562;
	            this.for_equation();
	            break;
	        case 66:
	            this.state = 563;
	            this.connect_clause();
	            break;
	        case 64:
	            this.state = 564;
	            this.when_equation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 567;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, modelicaParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 93:
	            this.state = 569;
	            this.component_reference();
	            this.state = 573;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 50:
	                this.state = 570;
	                this.match(modelicaParser.T__49);
	                this.state = 571;
	                this.expression();
	                break;
	            case 23:
	                this.state = 572;
	                this.function_call_args();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 23:
	            this.state = 575;
	            this.match(modelicaParser.T__22);
	            this.state = 576;
	            this.output_expression_list();
	            this.state = 577;
	            this.match(modelicaParser.T__24);
	            this.state = 578;
	            this.match(modelicaParser.T__49);
	            this.state = 579;
	            this.component_reference();
	            this.state = 580;
	            this.function_call_args();
	            break;
	        case 55:
	            this.state = 582;
	            this.match(modelicaParser.T__54);
	            break;
	        case 56:
	            this.state = 583;
	            this.match(modelicaParser.T__55);
	            break;
	        case 49:
	            this.state = 584;
	            this.if_statement();
	            break;
	        case 60:
	            this.state = 585;
	            this.for_statement();
	            break;
	        case 63:
	            this.state = 586;
	            this.while_statement();
	            break;
	        case 64:
	            this.state = 587;
	            this.when_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 590;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_equation() {
	    let localctx = new If_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, modelicaParser.RULE_if_equation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.match(modelicaParser.T__48);
	        this.state = 593;
	        this.expression();
	        this.state = 594;
	        this.match(modelicaParser.T__56);
	        this.state = 600;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 595;
	                this.equation();
	                this.state = 596;
	                this.match(modelicaParser.T__2); 
	            }
	            this.state = 602;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	        this.state = 616;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===58) {
	            this.state = 603;
	            this.match(modelicaParser.T__57);
	            this.state = 604;
	            this.expression();
	            this.state = 605;
	            this.match(modelicaParser.T__56);
	            this.state = 611;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 606;
	                    this.equation();
	                    this.state = 607;
	                    this.match(modelicaParser.T__2); 
	                }
	                this.state = 613;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	            }

	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 619;
	            this.match(modelicaParser.T__58);
	            this.state = 625;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 620;
	                    this.equation();
	                    this.state = 621;
	                    this.match(modelicaParser.T__2); 
	                }
	                this.state = 627;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	            }

	        }

	        this.state = 630;
	        this.match(modelicaParser.T__18);
	        this.state = 631;
	        this.match(modelicaParser.T__48);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, modelicaParser.RULE_if_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(modelicaParser.T__48);
	        this.state = 634;
	        this.expression();
	        this.state = 635;
	        this.match(modelicaParser.T__56);
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	            this.state = 636;
	            this.statement();
	            this.state = 637;
	            this.match(modelicaParser.T__2);
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===58) {
	            this.state = 644;
	            this.match(modelicaParser.T__57);
	            this.state = 645;
	            this.expression();
	            this.state = 646;
	            this.match(modelicaParser.T__56);
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	                this.state = 647;
	                this.statement();
	                this.state = 648;
	                this.match(modelicaParser.T__2);
	                this.state = 654;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 660;
	            this.match(modelicaParser.T__58);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	                this.state = 661;
	                this.statement();
	                this.state = 662;
	                this.match(modelicaParser.T__2);
	                this.state = 668;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 671;
	        this.match(modelicaParser.T__18);
	        this.state = 672;
	        this.match(modelicaParser.T__48);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_equation() {
	    let localctx = new For_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, modelicaParser.RULE_for_equation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this.match(modelicaParser.T__59);
	        this.state = 675;
	        this.for_indices();
	        this.state = 676;
	        this.match(modelicaParser.T__60);
	        this.state = 682;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 677;
	                this.equation();
	                this.state = 678;
	                this.match(modelicaParser.T__2); 
	            }
	            this.state = 684;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	        this.state = 685;
	        this.match(modelicaParser.T__18);
	        this.state = 686;
	        this.match(modelicaParser.T__59);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_statement() {
	    let localctx = new For_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, modelicaParser.RULE_for_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(modelicaParser.T__59);
	        this.state = 689;
	        this.for_indices();
	        this.state = 690;
	        this.match(modelicaParser.T__60);
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	            this.state = 691;
	            this.statement();
	            this.state = 692;
	            this.match(modelicaParser.T__2);
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 699;
	        this.match(modelicaParser.T__18);
	        this.state = 700;
	        this.match(modelicaParser.T__59);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_indices() {
	    let localctx = new For_indicesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, modelicaParser.RULE_for_indices);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this.for_index();
	        this.state = 707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 703;
	            this.match(modelicaParser.T__26);
	            this.state = 704;
	            this.for_index();
	            this.state = 709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_index() {
	    let localctx = new For_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, modelicaParser.RULE_for_index);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.match(modelicaParser.IDENT);
	        this.state = 713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 711;
	            this.match(modelicaParser.T__61);
	            this.state = 712;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, modelicaParser.RULE_while_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.match(modelicaParser.T__62);
	        this.state = 716;
	        this.expression();
	        this.state = 717;
	        this.match(modelicaParser.T__60);
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	            this.state = 718;
	            this.statement();
	            this.state = 719;
	            this.match(modelicaParser.T__2);
	            this.state = 725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 726;
	        this.match(modelicaParser.T__18);
	        this.state = 727;
	        this.match(modelicaParser.T__62);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_equation() {
	    let localctx = new When_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, modelicaParser.RULE_when_equation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.match(modelicaParser.T__63);
	        this.state = 730;
	        this.expression();
	        this.state = 731;
	        this.match(modelicaParser.T__56);
	        this.state = 737;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 732;
	                this.equation();
	                this.state = 733;
	                this.match(modelicaParser.T__2); 
	            }
	            this.state = 739;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===65) {
	            this.state = 740;
	            this.match(modelicaParser.T__64);
	            this.state = 741;
	            this.expression();
	            this.state = 742;
	            this.match(modelicaParser.T__56);
	            this.state = 748;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 743;
	                    this.equation();
	                    this.state = 744;
	                    this.match(modelicaParser.T__2); 
	                }
	                this.state = 750;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	            }

	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 756;
	        this.match(modelicaParser.T__18);
	        this.state = 757;
	        this.match(modelicaParser.T__63);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_statement() {
	    let localctx = new When_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, modelicaParser.RULE_when_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(modelicaParser.T__63);
	        this.state = 760;
	        this.expression();
	        this.state = 761;
	        this.match(modelicaParser.T__56);
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	            this.state = 762;
	            this.statement();
	            this.state = 763;
	            this.match(modelicaParser.T__2);
	            this.state = 769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===65) {
	            this.state = 770;
	            this.match(modelicaParser.T__64);
	            this.state = 771;
	            this.expression();
	            this.state = 772;
	            this.match(modelicaParser.T__56);
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 105252865) !== 0) || _la===93) {
	                this.state = 773;
	                this.statement();
	                this.state = 774;
	                this.match(modelicaParser.T__2);
	                this.state = 780;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 786;
	        this.match(modelicaParser.T__18);
	        this.state = 787;
	        this.match(modelicaParser.T__63);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connect_clause() {
	    let localctx = new Connect_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, modelicaParser.RULE_connect_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.match(modelicaParser.T__65);
	        this.state = 790;
	        this.match(modelicaParser.T__22);
	        this.state = 791;
	        this.component_reference();
	        this.state = 792;
	        this.match(modelicaParser.T__26);
	        this.state = 793;
	        this.component_reference();
	        this.state = 794;
	        this.match(modelicaParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, modelicaParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.state = 814;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 19:
	        case 23:
	        case 26:
	        case 38:
	        case 40:
	        case 52:
	        case 69:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 84:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 796;
	            this.simple_expression();
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 797;
	            this.match(modelicaParser.T__48);
	            this.state = 798;
	            this.expression();
	            this.state = 799;
	            this.match(modelicaParser.T__56);
	            this.state = 800;
	            this.expression();
	            this.state = 808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===58) {
	                this.state = 801;
	                this.match(modelicaParser.T__57);
	                this.state = 802;
	                this.expression();
	                this.state = 803;
	                this.match(modelicaParser.T__56);
	                this.state = 804;
	                this.expression();
	                this.state = 810;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 811;
	            this.match(modelicaParser.T__58);
	            this.state = 812;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_expression() {
	    let localctx = new Simple_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, modelicaParser.RULE_simple_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.logical_expression();
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 817;
	            this.match(modelicaParser.T__23);
	            this.state = 818;
	            this.logical_expression();
	            this.state = 821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 819;
	                this.match(modelicaParser.T__23);
	                this.state = 820;
	                this.logical_expression();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_expression() {
	    let localctx = new Logical_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, modelicaParser.RULE_logical_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this.logical_term();
	        this.state = 830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===67) {
	            this.state = 826;
	            this.match(modelicaParser.T__66);
	            this.state = 827;
	            this.logical_term();
	            this.state = 832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_term() {
	    let localctx = new Logical_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, modelicaParser.RULE_logical_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.logical_factor();
	        this.state = 838;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68) {
	            this.state = 834;
	            this.match(modelicaParser.T__67);
	            this.state = 835;
	            this.logical_factor();
	            this.state = 840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_factor() {
	    let localctx = new Logical_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, modelicaParser.RULE_logical_factor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 841;
	            this.match(modelicaParser.T__68);
	        }

	        this.state = 844;
	        this.relation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, modelicaParser.RULE_relation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.arithmetic_expression();
	        this.state = 850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 63) !== 0)) {
	            this.state = 847;
	            this.relational_operator();
	            this.state = 848;
	            this.arithmetic_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relational_operator() {
	    let localctx = new Relational_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, modelicaParser.RULE_relational_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852;
	        _la = this._input.LA(1);
	        if(!(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_expression() {
	    let localctx = new Arithmetic_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, modelicaParser.RULE_arithmetic_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 15) !== 0)) {
	            this.state = 854;
	            this.add_operator();
	        }

	        this.state = 857;
	        this.term();
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 15) !== 0)) {
	            this.state = 858;
	            this.add_operator();
	            this.state = 859;
	            this.term();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_operator() {
	    let localctx = new Add_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, modelicaParser.RULE_add_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 866;
	        _la = this._input.LA(1);
	        if(!(((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, modelicaParser.RULE_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 868;
	        this.factor();
	        this.state = 874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39 || _la===42 || _la===80 || _la===81) {
	            this.state = 869;
	            this.mul_operator();
	            this.state = 870;
	            this.factor();
	            this.state = 876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mul_operator() {
	    let localctx = new Mul_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, modelicaParser.RULE_mul_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===42 || _la===80 || _la===81)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, modelicaParser.RULE_factor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.primary();
	        this.state = 882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82 || _la===83) {
	            this.state = 880;
	            _la = this._input.LA(1);
	            if(!(_la===82 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 881;
	            this.primary();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, modelicaParser.RULE_primary);
	    var _la = 0;
	    try {
	        this.state = 914;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 884;
	            this.match(modelicaParser.UNSIGNED_NUMBER);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.match(modelicaParser.STRING);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 886;
	            this.match(modelicaParser.T__83);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 887;
	            this.match(modelicaParser.T__84);
	            break;
	        case 16:
	        case 26:
	        case 52:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 888;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===26 || _la===52)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 889;
	            this.function_call_args();
	            break;
	        case 38:
	        case 93:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 890;
	            this.component_reference();
	            this.state = 892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 891;
	                this.function_call_args();
	            }

	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 894;
	            this.match(modelicaParser.T__22);
	            this.state = 895;
	            this.output_expression_list();
	            this.state = 896;
	            this.match(modelicaParser.T__24);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 898;
	            this.match(modelicaParser.T__85);
	            this.state = 899;
	            this.expression_list();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 900;
	                this.match(modelicaParser.T__2);
	                this.state = 901;
	                this.expression_list();
	                this.state = 906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 907;
	            this.match(modelicaParser.T__86);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 909;
	            this.match(modelicaParser.T__39);
	            this.state = 910;
	            this.array_arguments();
	            this.state = 911;
	            this.match(modelicaParser.T__40);
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 913;
	            this.match(modelicaParser.T__18);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_specifier() {
	    let localctx = new Type_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, modelicaParser.RULE_type_specifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 916;
	            this.match(modelicaParser.T__37);
	        }

	        this.state = 919;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, modelicaParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 921;
	        this.match(modelicaParser.IDENT);
	        this.state = 926;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 922;
	                this.match(modelicaParser.T__37);
	                this.state = 923;
	                this.match(modelicaParser.IDENT); 
	            }
	            this.state = 928;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_reference() {
	    let localctx = new Component_referenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, modelicaParser.RULE_component_reference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 929;
	            this.match(modelicaParser.T__37);
	        }

	        this.state = 932;
	        this.match(modelicaParser.IDENT);
	        this.state = 934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 933;
	            this.array_subscripts();
	        }

	        this.state = 943;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 936;
	            this.match(modelicaParser.T__37);
	            this.state = 937;
	            this.match(modelicaParser.IDENT);
	            this.state = 939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 938;
	                this.array_subscripts();
	            }

	            this.state = 945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_args() {
	    let localctx = new Function_call_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, modelicaParser.RULE_function_call_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.match(modelicaParser.T__22);
	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 76349440) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2147502085) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 919311) !== 0)) {
	            this.state = 947;
	            this.function_arguments();
	        }

	        this.state = 950;
	        this.match(modelicaParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_arguments() {
	    let localctx = new Function_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, modelicaParser.RULE_function_arguments);
	    var _la = 0;
	    try {
	        this.state = 965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 952;
	            this.expression();
	            this.state = 957;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 27:
	            	this.state = 953;
	            	this.match(modelicaParser.T__26);
	            	this.state = 954;
	            	this.function_arguments_non_first();
	            	break;
	            case 60:
	            	this.state = 955;
	            	this.match(modelicaParser.T__59);
	            	this.state = 956;
	            	this.for_indices();
	            	break;
	            case 25:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 959;
	            this.function_partial_application();
	            this.state = 962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 960;
	                this.match(modelicaParser.T__26);
	                this.state = 961;
	                this.function_arguments_non_first();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 964;
	            this.named_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_arguments_non_first() {
	    let localctx = new Function_arguments_non_firstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, modelicaParser.RULE_function_arguments_non_first);
	    var _la = 0;
	    try {
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 967;
	            this.function_argument();
	            this.state = 970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 968;
	                this.match(modelicaParser.T__26);
	                this.state = 969;
	                this.function_arguments_non_first();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 972;
	            this.named_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_arguments() {
	    let localctx = new Array_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, modelicaParser.RULE_array_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.expression();
	        this.state = 985;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 41:
	            this.state = 980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 976;
	                this.match(modelicaParser.T__26);
	                this.state = 977;
	                this.expression();
	                this.state = 982;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 60:
	            this.state = 983;
	            this.match(modelicaParser.T__59);
	            this.state = 984;
	            this.for_indices();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_arguments() {
	    let localctx = new Named_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, modelicaParser.RULE_named_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.named_argument();
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 988;
	            this.match(modelicaParser.T__26);
	            this.state = 989;
	            this.named_argument();
	            this.state = 994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_argument() {
	    let localctx = new Named_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, modelicaParser.RULE_named_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.match(modelicaParser.IDENT);
	        this.state = 996;
	        this.match(modelicaParser.T__20);
	        this.state = 997;
	        this.function_argument();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_argument() {
	    let localctx = new Function_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, modelicaParser.RULE_function_argument);
	    try {
	        this.state = 1001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 999;
	            this.function_partial_application();
	            break;
	        case 16:
	        case 19:
	        case 23:
	        case 26:
	        case 38:
	        case 40:
	        case 49:
	        case 52:
	        case 69:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 84:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1000;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_partial_application() {
	    let localctx = new Function_partial_applicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, modelicaParser.RULE_function_partial_application);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this.match(modelicaParser.T__17);
	        this.state = 1004;
	        this.type_specifier();
	        this.state = 1005;
	        this.match(modelicaParser.T__22);
	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 1006;
	            this.named_arguments();
	        }

	        this.state = 1009;
	        this.match(modelicaParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	output_expression_list() {
	    let localctx = new Output_expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, modelicaParser.RULE_output_expression_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1012;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 76087296) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2147502085) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 919311) !== 0)) {
	            this.state = 1011;
	            this.expression();
	        }

	        this.state = 1020;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 1014;
	            this.match(modelicaParser.T__26);
	            this.state = 1016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 76087296) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2147502085) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 919311) !== 0)) {
	                this.state = 1015;
	                this.expression();
	            }

	            this.state = 1022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, modelicaParser.RULE_expression_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1023;
	        this.expression();
	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 1024;
	            this.match(modelicaParser.T__26);
	            this.state = 1025;
	            this.expression();
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_subscripts() {
	    let localctx = new Array_subscriptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, modelicaParser.RULE_array_subscripts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.match(modelicaParser.T__85);
	        this.state = 1032;
	        this.subscript();
	        this.state = 1037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 1033;
	            this.match(modelicaParser.T__26);
	            this.state = 1034;
	            this.subscript();
	            this.state = 1039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1040;
	        this.match(modelicaParser.T__86);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript() {
	    let localctx = new SubscriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, modelicaParser.RULE_subscript);
	    try {
	        this.state = 1044;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1042;
	            this.match(modelicaParser.T__23);
	            break;
	        case 16:
	        case 19:
	        case 23:
	        case 26:
	        case 38:
	        case 40:
	        case 49:
	        case 52:
	        case 69:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 84:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1043;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, modelicaParser.RULE_comment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046;
	        this.string_comment();
	        this.state = 1048;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 1047;
	            this.annotation_comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_comment() {
	    let localctx = new String_commentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, modelicaParser.RULE_string_comment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 1050;
	            this.match(modelicaParser.STRING);
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===76) {
	                this.state = 1051;
	                this.match(modelicaParser.T__75);
	                this.state = 1052;
	                this.match(modelicaParser.STRING);
	                this.state = 1057;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_comment() {
	    let localctx = new Annotation_commentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, modelicaParser.RULE_annotation_comment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1060;
	        this.match(modelicaParser.T__87);
	        this.state = 1061;
	        this.class_modification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

modelicaParser.EOF = antlr4.Token.EOF;
modelicaParser.T__0 = 1;
modelicaParser.T__1 = 2;
modelicaParser.T__2 = 3;
modelicaParser.T__3 = 4;
modelicaParser.T__4 = 5;
modelicaParser.T__5 = 6;
modelicaParser.T__6 = 7;
modelicaParser.T__7 = 8;
modelicaParser.T__8 = 9;
modelicaParser.T__9 = 10;
modelicaParser.T__10 = 11;
modelicaParser.T__11 = 12;
modelicaParser.T__12 = 13;
modelicaParser.T__13 = 14;
modelicaParser.T__14 = 15;
modelicaParser.T__15 = 16;
modelicaParser.T__16 = 17;
modelicaParser.T__17 = 18;
modelicaParser.T__18 = 19;
modelicaParser.T__19 = 20;
modelicaParser.T__20 = 21;
modelicaParser.T__21 = 22;
modelicaParser.T__22 = 23;
modelicaParser.T__23 = 24;
modelicaParser.T__24 = 25;
modelicaParser.T__25 = 26;
modelicaParser.T__26 = 27;
modelicaParser.T__27 = 28;
modelicaParser.T__28 = 29;
modelicaParser.T__29 = 30;
modelicaParser.T__30 = 31;
modelicaParser.T__31 = 32;
modelicaParser.T__32 = 33;
modelicaParser.T__33 = 34;
modelicaParser.T__34 = 35;
modelicaParser.T__35 = 36;
modelicaParser.T__36 = 37;
modelicaParser.T__37 = 38;
modelicaParser.T__38 = 39;
modelicaParser.T__39 = 40;
modelicaParser.T__40 = 41;
modelicaParser.T__41 = 42;
modelicaParser.T__42 = 43;
modelicaParser.T__43 = 44;
modelicaParser.T__44 = 45;
modelicaParser.T__45 = 46;
modelicaParser.T__46 = 47;
modelicaParser.T__47 = 48;
modelicaParser.T__48 = 49;
modelicaParser.T__49 = 50;
modelicaParser.T__50 = 51;
modelicaParser.T__51 = 52;
modelicaParser.T__52 = 53;
modelicaParser.T__53 = 54;
modelicaParser.T__54 = 55;
modelicaParser.T__55 = 56;
modelicaParser.T__56 = 57;
modelicaParser.T__57 = 58;
modelicaParser.T__58 = 59;
modelicaParser.T__59 = 60;
modelicaParser.T__60 = 61;
modelicaParser.T__61 = 62;
modelicaParser.T__62 = 63;
modelicaParser.T__63 = 64;
modelicaParser.T__64 = 65;
modelicaParser.T__65 = 66;
modelicaParser.T__66 = 67;
modelicaParser.T__67 = 68;
modelicaParser.T__68 = 69;
modelicaParser.T__69 = 70;
modelicaParser.T__70 = 71;
modelicaParser.T__71 = 72;
modelicaParser.T__72 = 73;
modelicaParser.T__73 = 74;
modelicaParser.T__74 = 75;
modelicaParser.T__75 = 76;
modelicaParser.T__76 = 77;
modelicaParser.T__77 = 78;
modelicaParser.T__78 = 79;
modelicaParser.T__79 = 80;
modelicaParser.T__80 = 81;
modelicaParser.T__81 = 82;
modelicaParser.T__82 = 83;
modelicaParser.T__83 = 84;
modelicaParser.T__84 = 85;
modelicaParser.T__85 = 86;
modelicaParser.T__86 = 87;
modelicaParser.T__87 = 88;
modelicaParser.BOM = 89;
modelicaParser.WS = 90;
modelicaParser.LINE_COMMENT = 91;
modelicaParser.ML_COMMENT = 92;
modelicaParser.IDENT = 93;
modelicaParser.STRING = 94;
modelicaParser.UNSIGNED_NUMBER = 95;

modelicaParser.RULE_stored_definition = 0;
modelicaParser.RULE_class_definition = 1;
modelicaParser.RULE_class_prefixes = 2;
modelicaParser.RULE_class_specifier = 3;
modelicaParser.RULE_long_class_specifier = 4;
modelicaParser.RULE_short_class_specifier = 5;
modelicaParser.RULE_der_class_specifier = 6;
modelicaParser.RULE_base_prefix = 7;
modelicaParser.RULE_enum_list = 8;
modelicaParser.RULE_enumeration_literal = 9;
modelicaParser.RULE_composition = 10;
modelicaParser.RULE_language_specification = 11;
modelicaParser.RULE_external_function_call = 12;
modelicaParser.RULE_element_list = 13;
modelicaParser.RULE_element = 14;
modelicaParser.RULE_import_clause = 15;
modelicaParser.RULE_import_list = 16;
modelicaParser.RULE_extends_clause = 17;
modelicaParser.RULE_constraining_clause = 18;
modelicaParser.RULE_component_clause = 19;
modelicaParser.RULE_type_prefix = 20;
modelicaParser.RULE_component_list = 21;
modelicaParser.RULE_component_declaration = 22;
modelicaParser.RULE_condition_attribute = 23;
modelicaParser.RULE_declaration = 24;
modelicaParser.RULE_modification = 25;
modelicaParser.RULE_class_modification = 26;
modelicaParser.RULE_argument_list = 27;
modelicaParser.RULE_argument = 28;
modelicaParser.RULE_element_modification_or_replaceable = 29;
modelicaParser.RULE_element_modification = 30;
modelicaParser.RULE_element_redeclaration = 31;
modelicaParser.RULE_element_replaceable = 32;
modelicaParser.RULE_component_clause1 = 33;
modelicaParser.RULE_component_declaration1 = 34;
modelicaParser.RULE_short_class_definition = 35;
modelicaParser.RULE_equation_section = 36;
modelicaParser.RULE_algorithm_section = 37;
modelicaParser.RULE_equation = 38;
modelicaParser.RULE_statement = 39;
modelicaParser.RULE_if_equation = 40;
modelicaParser.RULE_if_statement = 41;
modelicaParser.RULE_for_equation = 42;
modelicaParser.RULE_for_statement = 43;
modelicaParser.RULE_for_indices = 44;
modelicaParser.RULE_for_index = 45;
modelicaParser.RULE_while_statement = 46;
modelicaParser.RULE_when_equation = 47;
modelicaParser.RULE_when_statement = 48;
modelicaParser.RULE_connect_clause = 49;
modelicaParser.RULE_expression = 50;
modelicaParser.RULE_simple_expression = 51;
modelicaParser.RULE_logical_expression = 52;
modelicaParser.RULE_logical_term = 53;
modelicaParser.RULE_logical_factor = 54;
modelicaParser.RULE_relation = 55;
modelicaParser.RULE_relational_operator = 56;
modelicaParser.RULE_arithmetic_expression = 57;
modelicaParser.RULE_add_operator = 58;
modelicaParser.RULE_term = 59;
modelicaParser.RULE_mul_operator = 60;
modelicaParser.RULE_factor = 61;
modelicaParser.RULE_primary = 62;
modelicaParser.RULE_type_specifier = 63;
modelicaParser.RULE_name = 64;
modelicaParser.RULE_component_reference = 65;
modelicaParser.RULE_function_call_args = 66;
modelicaParser.RULE_function_arguments = 67;
modelicaParser.RULE_function_arguments_non_first = 68;
modelicaParser.RULE_array_arguments = 69;
modelicaParser.RULE_named_arguments = 70;
modelicaParser.RULE_named_argument = 71;
modelicaParser.RULE_function_argument = 72;
modelicaParser.RULE_function_partial_application = 73;
modelicaParser.RULE_output_expression_list = 74;
modelicaParser.RULE_expression_list = 75;
modelicaParser.RULE_array_subscripts = 76;
modelicaParser.RULE_subscript = 77;
modelicaParser.RULE_comment = 78;
modelicaParser.RULE_string_comment = 79;
modelicaParser.RULE_annotation_comment = 80;

class Stored_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_stored_definition;
    }

	EOF() {
	    return this.getToken(modelicaParser.EOF, 0);
	};

	class_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Class_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Class_definitionContext,i);
	    }
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterStored_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitStored_definition(this);
		}
	}


}



class Class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_definition;
    }

	class_prefixes() {
	    return this.getTypedRuleContext(Class_prefixesContext,0);
	};

	class_specifier() {
	    return this.getTypedRuleContext(Class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_definition(this);
		}
	}


}



class Class_prefixesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_prefixes;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_prefixes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_prefixes(this);
		}
	}


}



class Class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_specifier;
    }

	long_class_specifier() {
	    return this.getTypedRuleContext(Long_class_specifierContext,0);
	};

	short_class_specifier() {
	    return this.getTypedRuleContext(Short_class_specifierContext,0);
	};

	der_class_specifier() {
	    return this.getTypedRuleContext(Der_class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_specifier(this);
		}
	}


}



class Long_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_long_class_specifier;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	composition() {
	    return this.getTypedRuleContext(CompositionContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLong_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLong_class_specifier(this);
		}
	}


}



class Short_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_short_class_specifier;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	base_prefix() {
	    return this.getTypedRuleContext(Base_prefixContext,0);
	};

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enum_list() {
	    return this.getTypedRuleContext(Enum_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterShort_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitShort_class_specifier(this);
		}
	}


}



class Der_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_der_class_specifier;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterDer_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitDer_class_specifier(this);
		}
	}


}



class Base_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_base_prefix;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterBase_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitBase_prefix(this);
		}
	}


}



class Enum_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_enum_list;
    }

	enumeration_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enumeration_literalContext);
	    } else {
	        return this.getTypedRuleContext(Enumeration_literalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEnum_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEnum_list(this);
		}
	}


}



class Enumeration_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_enumeration_literal;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEnumeration_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEnumeration_literal(this);
		}
	}


}



class CompositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_composition;
    }

	element_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_listContext);
	    } else {
	        return this.getTypedRuleContext(Element_listContext,i);
	    }
	};

	equation_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Equation_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Equation_sectionContext,i);
	    }
	};

	algorithm_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Algorithm_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Algorithm_sectionContext,i);
	    }
	};

	annotation_comment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_commentContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_commentContext,i);
	    }
	};

	language_specification() {
	    return this.getTypedRuleContext(Language_specificationContext,0);
	};

	external_function_call() {
	    return this.getTypedRuleContext(External_function_callContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComposition(this);
		}
	}


}



class Language_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_language_specification;
    }

	STRING() {
	    return this.getToken(modelicaParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLanguage_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLanguage_specification(this);
		}
	}


}



class External_function_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_external_function_call;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExternal_function_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExternal_function_call(this);
		}
	}


}



class Element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_list;
    }

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_list(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element;
    }

	import_clause() {
	    return this.getTypedRuleContext(Import_clauseContext,0);
	};

	extends_clause() {
	    return this.getTypedRuleContext(Extends_clauseContext,0);
	};

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	component_clause() {
	    return this.getTypedRuleContext(Component_clauseContext,0);
	};

	constraining_clause() {
	    return this.getTypedRuleContext(Constraining_clauseContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement(this);
		}
	}


}



class Import_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_import_clause;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	import_list() {
	    return this.getTypedRuleContext(Import_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterImport_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitImport_clause(this);
		}
	}


}



class Import_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_import_list;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterImport_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitImport_list(this);
		}
	}


}



class Extends_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_extends_clause;
    }

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	annotation_comment() {
	    return this.getTypedRuleContext(Annotation_commentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExtends_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExtends_clause(this);
		}
	}


}



class Constraining_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_constraining_clause;
    }

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterConstraining_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitConstraining_clause(this);
		}
	}


}



class Component_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_clause;
    }

	type_prefix() {
	    return this.getTypedRuleContext(Type_prefixContext,0);
	};

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	component_list() {
	    return this.getTypedRuleContext(Component_listContext,0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_clause(this);
		}
	}


}



class Type_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_type_prefix;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterType_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitType_prefix(this);
		}
	}


}



class Component_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_list;
    }

	component_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Component_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Component_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_list(this);
		}
	}


}



class Component_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_declaration;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	condition_attribute() {
	    return this.getTypedRuleContext(Condition_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_declaration(this);
		}
	}


}



class Condition_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_condition_attribute;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterCondition_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitCondition_attribute(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_declaration;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	modification() {
	    return this.getTypedRuleContext(ModificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class ModificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_modification;
    }

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterModification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitModification(this);
		}
	}


}



class Class_modificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_modification;
    }

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_modification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_modification(this);
		}
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArgument_list(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_argument;
    }

	element_modification_or_replaceable() {
	    return this.getTypedRuleContext(Element_modification_or_replaceableContext,0);
	};

	element_redeclaration() {
	    return this.getTypedRuleContext(Element_redeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArgument(this);
		}
	}


}



class Element_modification_or_replaceableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_modification_or_replaceable;
    }

	element_modification() {
	    return this.getTypedRuleContext(Element_modificationContext,0);
	};

	element_replaceable() {
	    return this.getTypedRuleContext(Element_replaceableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_modification_or_replaceable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_modification_or_replaceable(this);
		}
	}


}



class Element_modificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_modification;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	modification() {
	    return this.getTypedRuleContext(ModificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_modification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_modification(this);
		}
	}


}



class Element_redeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_redeclaration;
    }

	short_class_definition() {
	    return this.getTypedRuleContext(Short_class_definitionContext,0);
	};

	component_clause1() {
	    return this.getTypedRuleContext(Component_clause1Context,0);
	};

	element_replaceable() {
	    return this.getTypedRuleContext(Element_replaceableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_redeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_redeclaration(this);
		}
	}


}



class Element_replaceableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_replaceable;
    }

	short_class_definition() {
	    return this.getTypedRuleContext(Short_class_definitionContext,0);
	};

	component_clause1() {
	    return this.getTypedRuleContext(Component_clause1Context,0);
	};

	constraining_clause() {
	    return this.getTypedRuleContext(Constraining_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_replaceable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_replaceable(this);
		}
	}


}



class Component_clause1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_clause1;
    }

	type_prefix() {
	    return this.getTypedRuleContext(Type_prefixContext,0);
	};

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	component_declaration1() {
	    return this.getTypedRuleContext(Component_declaration1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_clause1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_clause1(this);
		}
	}


}



class Component_declaration1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_declaration1;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_declaration1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_declaration1(this);
		}
	}


}



class Short_class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_short_class_definition;
    }

	class_prefixes() {
	    return this.getTypedRuleContext(Class_prefixesContext,0);
	};

	short_class_specifier() {
	    return this.getTypedRuleContext(Short_class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterShort_class_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitShort_class_definition(this);
		}
	}


}



class Equation_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_equation_section;
    }

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEquation_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEquation_section(this);
		}
	}


}



class Algorithm_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_algorithm_section;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAlgorithm_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAlgorithm_section(this);
		}
	}


}



class EquationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_equation;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	simple_expression() {
	    return this.getTypedRuleContext(Simple_expressionContext,0);
	};

	if_equation() {
	    return this.getTypedRuleContext(If_equationContext,0);
	};

	for_equation() {
	    return this.getTypedRuleContext(For_equationContext,0);
	};

	connect_clause() {
	    return this.getTypedRuleContext(Connect_clauseContext,0);
	};

	when_equation() {
	    return this.getTypedRuleContext(When_equationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEquation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEquation(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_statement;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	output_expression_list() {
	    return this.getTypedRuleContext(Output_expression_listContext,0);
	};

	function_call_args() {
	    return this.getTypedRuleContext(Function_call_argsContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	for_statement() {
	    return this.getTypedRuleContext(For_statementContext,0);
	};

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	when_statement() {
	    return this.getTypedRuleContext(When_statementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitStatement(this);
		}
	}


}



class If_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_if_equation;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterIf_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitIf_equation(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_if_statement;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class For_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_equation;
    }

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_equation(this);
		}
	}


}



class For_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_statement;
    }

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_statement(this);
		}
	}


}



class For_indicesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_indices;
    }

	for_index = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(For_indexContext);
	    } else {
	        return this.getTypedRuleContext(For_indexContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_indices(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_indices(this);
		}
	}


}



class For_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_index;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_index(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_while_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class When_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_when_equation;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhen_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhen_equation(this);
		}
	}


}



class When_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_when_statement;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhen_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhen_statement(this);
		}
	}


}



class Connect_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_connect_clause;
    }

	component_reference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Component_referenceContext);
	    } else {
	        return this.getTypedRuleContext(Component_referenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterConnect_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitConnect_clause(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_expression;
    }

	simple_expression() {
	    return this.getTypedRuleContext(Simple_expressionContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Simple_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_simple_expression;
    }

	logical_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Logical_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterSimple_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitSimple_expression(this);
		}
	}


}



class Logical_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_expression;
    }

	logical_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_termContext);
	    } else {
	        return this.getTypedRuleContext(Logical_termContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_expression(this);
		}
	}


}



class Logical_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_term;
    }

	logical_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_factorContext);
	    } else {
	        return this.getTypedRuleContext(Logical_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_term(this);
		}
	}


}



class Logical_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_factor;
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_factor(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_relation;
    }

	arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_expressionContext,i);
	    }
	};

	relational_operator() {
	    return this.getTypedRuleContext(Relational_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitRelation(this);
		}
	}


}



class Relational_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_relational_operator;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterRelational_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitRelational_operator(this);
		}
	}


}



class Arithmetic_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_arithmetic_expression;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	add_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Add_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArithmetic_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArithmetic_expression(this);
		}
	}


}



class Add_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_add_operator;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAdd_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAdd_operator(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	mul_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mul_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Mul_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Mul_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_mul_operator;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterMul_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitMul_operator(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_factor;
    }

	primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFactor(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_primary;
    }

	UNSIGNED_NUMBER() {
	    return this.getToken(modelicaParser.UNSIGNED_NUMBER, 0);
	};

	STRING() {
	    return this.getToken(modelicaParser.STRING, 0);
	};

	function_call_args() {
	    return this.getTypedRuleContext(Function_call_argsContext,0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	output_expression_list() {
	    return this.getTypedRuleContext(Output_expression_listContext,0);
	};

	expression_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_listContext);
	    } else {
	        return this.getTypedRuleContext(Expression_listContext,i);
	    }
	};

	array_arguments() {
	    return this.getTypedRuleContext(Array_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class Type_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_type_specifier;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterType_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitType_specifier(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_name;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitName(this);
		}
	}


}



class Component_referenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_reference;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	array_subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_subscriptsContext);
	    } else {
	        return this.getTypedRuleContext(Array_subscriptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_reference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_reference(this);
		}
	}


}



class Function_call_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_call_args;
    }

	function_arguments() {
	    return this.getTypedRuleContext(Function_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_call_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_call_args(this);
		}
	}


}



class Function_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_arguments;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	function_arguments_non_first() {
	    return this.getTypedRuleContext(Function_arguments_non_firstContext,0);
	};

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	function_partial_application() {
	    return this.getTypedRuleContext(Function_partial_applicationContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_arguments(this);
		}
	}


}



class Function_arguments_non_firstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_arguments_non_first;
    }

	function_argument() {
	    return this.getTypedRuleContext(Function_argumentContext,0);
	};

	function_arguments_non_first() {
	    return this.getTypedRuleContext(Function_arguments_non_firstContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_arguments_non_first(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_arguments_non_first(this);
		}
	}


}



class Array_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_array_arguments;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArray_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArray_arguments(this);
		}
	}


}



class Named_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_named_arguments;
    }

	named_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Named_argumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterNamed_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitNamed_arguments(this);
		}
	}


}



class Named_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_named_argument;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	function_argument() {
	    return this.getTypedRuleContext(Function_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterNamed_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitNamed_argument(this);
		}
	}


}



class Function_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_argument;
    }

	function_partial_application() {
	    return this.getTypedRuleContext(Function_partial_applicationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_argument(this);
		}
	}


}



class Function_partial_applicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_partial_application;
    }

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_partial_application(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_partial_application(this);
		}
	}


}



class Output_expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_output_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterOutput_expression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitOutput_expression_list(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Array_subscriptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_array_subscripts;
    }

	subscript = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArray_subscripts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArray_subscripts(this);
		}
	}


}



class SubscriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_subscript;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitSubscript(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_comment;
    }

	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	annotation_comment() {
	    return this.getTypedRuleContext(Annotation_commentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComment(this);
		}
	}


}



class String_commentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_string_comment;
    }

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.STRING);
	    } else {
	        return this.getToken(modelicaParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterString_comment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitString_comment(this);
		}
	}


}



class Annotation_commentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_annotation_comment;
    }

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAnnotation_comment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAnnotation_comment(this);
		}
	}


}




modelicaParser.Stored_definitionContext = Stored_definitionContext; 
modelicaParser.Class_definitionContext = Class_definitionContext; 
modelicaParser.Class_prefixesContext = Class_prefixesContext; 
modelicaParser.Class_specifierContext = Class_specifierContext; 
modelicaParser.Long_class_specifierContext = Long_class_specifierContext; 
modelicaParser.Short_class_specifierContext = Short_class_specifierContext; 
modelicaParser.Der_class_specifierContext = Der_class_specifierContext; 
modelicaParser.Base_prefixContext = Base_prefixContext; 
modelicaParser.Enum_listContext = Enum_listContext; 
modelicaParser.Enumeration_literalContext = Enumeration_literalContext; 
modelicaParser.CompositionContext = CompositionContext; 
modelicaParser.Language_specificationContext = Language_specificationContext; 
modelicaParser.External_function_callContext = External_function_callContext; 
modelicaParser.Element_listContext = Element_listContext; 
modelicaParser.ElementContext = ElementContext; 
modelicaParser.Import_clauseContext = Import_clauseContext; 
modelicaParser.Import_listContext = Import_listContext; 
modelicaParser.Extends_clauseContext = Extends_clauseContext; 
modelicaParser.Constraining_clauseContext = Constraining_clauseContext; 
modelicaParser.Component_clauseContext = Component_clauseContext; 
modelicaParser.Type_prefixContext = Type_prefixContext; 
modelicaParser.Component_listContext = Component_listContext; 
modelicaParser.Component_declarationContext = Component_declarationContext; 
modelicaParser.Condition_attributeContext = Condition_attributeContext; 
modelicaParser.DeclarationContext = DeclarationContext; 
modelicaParser.ModificationContext = ModificationContext; 
modelicaParser.Class_modificationContext = Class_modificationContext; 
modelicaParser.Argument_listContext = Argument_listContext; 
modelicaParser.ArgumentContext = ArgumentContext; 
modelicaParser.Element_modification_or_replaceableContext = Element_modification_or_replaceableContext; 
modelicaParser.Element_modificationContext = Element_modificationContext; 
modelicaParser.Element_redeclarationContext = Element_redeclarationContext; 
modelicaParser.Element_replaceableContext = Element_replaceableContext; 
modelicaParser.Component_clause1Context = Component_clause1Context; 
modelicaParser.Component_declaration1Context = Component_declaration1Context; 
modelicaParser.Short_class_definitionContext = Short_class_definitionContext; 
modelicaParser.Equation_sectionContext = Equation_sectionContext; 
modelicaParser.Algorithm_sectionContext = Algorithm_sectionContext; 
modelicaParser.EquationContext = EquationContext; 
modelicaParser.StatementContext = StatementContext; 
modelicaParser.If_equationContext = If_equationContext; 
modelicaParser.If_statementContext = If_statementContext; 
modelicaParser.For_equationContext = For_equationContext; 
modelicaParser.For_statementContext = For_statementContext; 
modelicaParser.For_indicesContext = For_indicesContext; 
modelicaParser.For_indexContext = For_indexContext; 
modelicaParser.While_statementContext = While_statementContext; 
modelicaParser.When_equationContext = When_equationContext; 
modelicaParser.When_statementContext = When_statementContext; 
modelicaParser.Connect_clauseContext = Connect_clauseContext; 
modelicaParser.ExpressionContext = ExpressionContext; 
modelicaParser.Simple_expressionContext = Simple_expressionContext; 
modelicaParser.Logical_expressionContext = Logical_expressionContext; 
modelicaParser.Logical_termContext = Logical_termContext; 
modelicaParser.Logical_factorContext = Logical_factorContext; 
modelicaParser.RelationContext = RelationContext; 
modelicaParser.Relational_operatorContext = Relational_operatorContext; 
modelicaParser.Arithmetic_expressionContext = Arithmetic_expressionContext; 
modelicaParser.Add_operatorContext = Add_operatorContext; 
modelicaParser.TermContext = TermContext; 
modelicaParser.Mul_operatorContext = Mul_operatorContext; 
modelicaParser.FactorContext = FactorContext; 
modelicaParser.PrimaryContext = PrimaryContext; 
modelicaParser.Type_specifierContext = Type_specifierContext; 
modelicaParser.NameContext = NameContext; 
modelicaParser.Component_referenceContext = Component_referenceContext; 
modelicaParser.Function_call_argsContext = Function_call_argsContext; 
modelicaParser.Function_argumentsContext = Function_argumentsContext; 
modelicaParser.Function_arguments_non_firstContext = Function_arguments_non_firstContext; 
modelicaParser.Array_argumentsContext = Array_argumentsContext; 
modelicaParser.Named_argumentsContext = Named_argumentsContext; 
modelicaParser.Named_argumentContext = Named_argumentContext; 
modelicaParser.Function_argumentContext = Function_argumentContext; 
modelicaParser.Function_partial_applicationContext = Function_partial_applicationContext; 
modelicaParser.Output_expression_listContext = Output_expression_listContext; 
modelicaParser.Expression_listContext = Expression_listContext; 
modelicaParser.Array_subscriptsContext = Array_subscriptsContext; 
modelicaParser.SubscriptContext = SubscriptContext; 
modelicaParser.CommentContext = CommentContext; 
modelicaParser.String_commentContext = String_commentContext; 
modelicaParser.Annotation_commentContext = Annotation_commentContext; 
